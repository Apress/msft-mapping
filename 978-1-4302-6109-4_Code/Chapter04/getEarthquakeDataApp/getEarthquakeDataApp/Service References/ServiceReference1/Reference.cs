//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace getEarthquakeDataApp.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Earthquake", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    [System.SerializableAttribute()]
    public partial class Earthquake : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DepthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private getEarthquakeDataApp.ServiceReference1.Location LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MagTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MagnitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NbStationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RMSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime WhenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Depth {
            get {
                return this.DepthField;
            }
            set {
                if ((this.DepthField.Equals(value) != true)) {
                    this.DepthField = value;
                    this.RaisePropertyChanged("Depth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIDField, value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Gap {
            get {
                return this.GapField;
            }
            set {
                if ((this.GapField.Equals(value) != true)) {
                    this.GapField = value;
                    this.RaisePropertyChanged("Gap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public getEarthquakeDataApp.ServiceReference1.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MagType {
            get {
                return this.MagTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MagTypeField, value) != true)) {
                    this.MagTypeField = value;
                    this.RaisePropertyChanged("MagType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Magnitude {
            get {
                return this.MagnitudeField;
            }
            set {
                if ((this.MagnitudeField.Equals(value) != true)) {
                    this.MagnitudeField = value;
                    this.RaisePropertyChanged("Magnitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NbStation {
            get {
                return this.NbStationField;
            }
            set {
                if ((this.NbStationField.Equals(value) != true)) {
                    this.NbStationField = value;
                    this.RaisePropertyChanged("NbStation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float RMS {
            get {
                return this.RMSField;
            }
            set {
                if ((this.RMSField.Equals(value) != true)) {
                    this.RMSField = value;
                    this.RaisePropertyChanged("RMS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime When {
            get {
                return this.WhenField;
            }
            set {
                if ((this.WhenField.Equals(value) != true)) {
                    this.WhenField = value;
                    this.RaisePropertyChanged("When");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Maps.MapControl.WPF")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private getEarthquakeDataApp.ServiceReference1.AltitudeReference AltitudeReferenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public getEarthquakeDataApp.ServiceReference1.AltitudeReference AltitudeReference {
            get {
                return this.AltitudeReferenceField;
            }
            set {
                if ((this.AltitudeReferenceField.Equals(value) != true)) {
                    this.AltitudeReferenceField = value;
                    this.RaisePropertyChanged("AltitudeReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AltitudeReference", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.Maps.MapControl.WPF")]
    public enum AltitudeReference : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ground = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ellipsoid = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SeaLevel = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Surface = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEarthquakeData", ReplyAction="http://tempuri.org/IService1/GetEarthquakeDataResponse")]
        System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> GetEarthquakeData();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetEarthquakeData", ReplyAction="http://tempuri.org/IService1/GetEarthquakeDataResponse")]
        System.IAsyncResult BeginGetEarthquakeData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> EndGetEarthquakeData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEarthquakeDataBBox", ReplyAction="http://tempuri.org/IService1/GetEarthquakeDataBBoxResponse")]
        System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> GetEarthquakeDataBBox(double TLLong, double TLLat, double BRLong, double BRLat);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetEarthquakeDataBBox", ReplyAction="http://tempuri.org/IService1/GetEarthquakeDataBBoxResponse")]
        System.IAsyncResult BeginGetEarthquakeDataBBox(double TLLong, double TLLat, double BRLong, double BRLat, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> EndGetEarthquakeDataBBox(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : getEarthquakeDataApp.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEarthquakeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEarthquakeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEarthquakeDataBBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEarthquakeDataBBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<getEarthquakeDataApp.ServiceReference1.IService1>, getEarthquakeDataApp.ServiceReference1.IService1 {
        
        private BeginOperationDelegate onBeginGetEarthquakeDataDelegate;
        
        private EndOperationDelegate onEndGetEarthquakeDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetEarthquakeDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEarthquakeDataBBoxDelegate;
        
        private EndOperationDelegate onEndGetEarthquakeDataBBoxDelegate;
        
        private System.Threading.SendOrPostCallback onGetEarthquakeDataBBoxCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetEarthquakeDataCompletedEventArgs> GetEarthquakeDataCompleted;
        
        public event System.EventHandler<GetEarthquakeDataBBoxCompletedEventArgs> GetEarthquakeDataBBoxCompleted;
        
        public System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> GetEarthquakeData() {
            return base.Channel.GetEarthquakeData();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEarthquakeData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEarthquakeData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> EndGetEarthquakeData(System.IAsyncResult result) {
            return base.Channel.EndGetEarthquakeData(result);
        }
        
        private System.IAsyncResult OnBeginGetEarthquakeData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetEarthquakeData(callback, asyncState);
        }
        
        private object[] OnEndGetEarthquakeData(System.IAsyncResult result) {
            System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> retVal = this.EndGetEarthquakeData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEarthquakeDataCompleted(object state) {
            if ((this.GetEarthquakeDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEarthquakeDataCompleted(this, new GetEarthquakeDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEarthquakeDataAsync() {
            this.GetEarthquakeDataAsync(null);
        }
        
        public void GetEarthquakeDataAsync(object userState) {
            if ((this.onBeginGetEarthquakeDataDelegate == null)) {
                this.onBeginGetEarthquakeDataDelegate = new BeginOperationDelegate(this.OnBeginGetEarthquakeData);
            }
            if ((this.onEndGetEarthquakeDataDelegate == null)) {
                this.onEndGetEarthquakeDataDelegate = new EndOperationDelegate(this.OnEndGetEarthquakeData);
            }
            if ((this.onGetEarthquakeDataCompletedDelegate == null)) {
                this.onGetEarthquakeDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEarthquakeDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetEarthquakeDataDelegate, null, this.onEndGetEarthquakeDataDelegate, this.onGetEarthquakeDataCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> GetEarthquakeDataBBox(double TLLong, double TLLat, double BRLong, double BRLat) {
            return base.Channel.GetEarthquakeDataBBox(TLLong, TLLat, BRLong, BRLat);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEarthquakeDataBBox(double TLLong, double TLLat, double BRLong, double BRLat, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEarthquakeDataBBox(TLLong, TLLat, BRLong, BRLat, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> EndGetEarthquakeDataBBox(System.IAsyncResult result) {
            return base.Channel.EndGetEarthquakeDataBBox(result);
        }
        
        private System.IAsyncResult OnBeginGetEarthquakeDataBBox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double TLLong = ((double)(inValues[0]));
            double TLLat = ((double)(inValues[1]));
            double BRLong = ((double)(inValues[2]));
            double BRLat = ((double)(inValues[3]));
            return this.BeginGetEarthquakeDataBBox(TLLong, TLLat, BRLong, BRLat, callback, asyncState);
        }
        
        private object[] OnEndGetEarthquakeDataBBox(System.IAsyncResult result) {
            System.Collections.Generic.List<getEarthquakeDataApp.ServiceReference1.Earthquake> retVal = this.EndGetEarthquakeDataBBox(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEarthquakeDataBBoxCompleted(object state) {
            if ((this.GetEarthquakeDataBBoxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEarthquakeDataBBoxCompleted(this, new GetEarthquakeDataBBoxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEarthquakeDataBBoxAsync(double TLLong, double TLLat, double BRLong, double BRLat) {
            this.GetEarthquakeDataBBoxAsync(TLLong, TLLat, BRLong, BRLat, null);
        }
        
        public void GetEarthquakeDataBBoxAsync(double TLLong, double TLLat, double BRLong, double BRLat, object userState) {
            if ((this.onBeginGetEarthquakeDataBBoxDelegate == null)) {
                this.onBeginGetEarthquakeDataBBoxDelegate = new BeginOperationDelegate(this.OnBeginGetEarthquakeDataBBox);
            }
            if ((this.onEndGetEarthquakeDataBBoxDelegate == null)) {
                this.onEndGetEarthquakeDataBBoxDelegate = new EndOperationDelegate(this.OnEndGetEarthquakeDataBBox);
            }
            if ((this.onGetEarthquakeDataBBoxCompletedDelegate == null)) {
                this.onGetEarthquakeDataBBoxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEarthquakeDataBBoxCompleted);
            }
            base.InvokeAsync(this.onBeginGetEarthquakeDataBBoxDelegate, new object[] {
                        TLLong,
                        TLLat,
                        BRLong,
                        BRLat}, this.onEndGetEarthquakeDataBBoxDelegate, this.onGetEarthquakeDataBBoxCompletedDelegate, userState);
        }
    }
}
